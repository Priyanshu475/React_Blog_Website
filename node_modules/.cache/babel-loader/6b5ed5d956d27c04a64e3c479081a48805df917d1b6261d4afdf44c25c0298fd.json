{"ast":null,"code":"var _jsxFileName = \"/home/priyanshu/Desktop/WEBD/React/Tut3/src/Home.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport BlogList from \"./BlogList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [blogs, setBlogs] = useState([{\n    title: \"My new website\",\n    body: \"lorem ipsum...\",\n    author: \"mario\",\n    id: 1\n  }, {\n    title: \"Welcome party\",\n    body: \"lorem ipsum...\",\n    author: \"yoshi\",\n    id: 2\n  }, {\n    title: \"Web dev top tips\",\n    body: \"lorem ipsum...\",\n    author: \"mario\",\n    id: 3\n  }]);\n  const [name, setName] = useState(null);\n  function handleDelete(id) {\n    const newBlogs = blogs.filter(blog => blog.id !== id);\n    setBlogs(newBlogs);\n  }\n\n  // using fetch data with useeffect\n\n  // once fetched we get a repsonse object we need to convert it to json\n  useEffect(() => {\n    fetch(\"http://localhost:8000/blogs\").then(res => {\n      return res.json();\n    }).then(data => {\n      setBlogs(data);\n    });\n  }, []);\n\n  // if name chnages it will run the useeffect\n\n  // we will use fetch data to fetch from db.json\n  //  /blogs GET Fetche all blogs\n  // /blogs POST Add a new blog\n  // /blogs/:id GET Fetch a single blog\n  //blogs/:id DELETE Delete a single blog\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: /*#__PURE__*/_jsxDEV(BlogList, {\n      blogs: blogs,\n      title: \"All Blogs!!!\",\n      handleDelete: handleDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"xJ3nxiW07Vt4bPe6MBRlgc/3BXw=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useState","useEffect","BlogList","jsxDEV","_jsxDEV","Home","_s","blogs","setBlogs","title","body","author","id","name","setName","handleDelete","newBlogs","filter","blog","fetch","then","res","json","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/priyanshu/Desktop/WEBD/React/Tut3/src/Home.js"],"sourcesContent":["import { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport BlogList from \"./BlogList\";\n\nconst Home = () => {\nconst [blogs,setBlogs]=useState([\n    {title:\"My new website\",body:\"lorem ipsum...\",author:\"mario\",id:1},\n    {title:\"Welcome party\",body:\"lorem ipsum...\",author:\"yoshi\",id:2},\n    {title:\"Web dev top tips\",body:\"lorem ipsum...\",author:\"mario\",id:3}\n]);\n\nconst [name,setName]=useState(null);\n\nfunction handleDelete(id){\n    const newBlogs=blogs.filter(blog=>blog.id!==id);\n    setBlogs(newBlogs);\n}\n\n\n// using fetch data with useeffect\n\n// once fetched we get a repsonse object we need to convert it to json\nuseEffect(()=>{\n    fetch(\"http://localhost:8000/blogs\")\n    .then(res=>{\n        return res.json();\n    })\n    .then(data=>{\n        setBlogs(data);\n    }\n    );\n},[]);\n \n\n// if name chnages it will run the useeffect\n\n\n\n// we will use fetch data to fetch from db.json\n//  /blogs GET Fetche all blogs\n// /blogs POST Add a new blog\n// /blogs/:id GET Fetch a single blog\n//blogs/:id DELETE Delete a single blog\n\n\n\nreturn (\n    <div className=\"home\">\n        <BlogList blogs={blogs} title=\"All Blogs!!!\" handleDelete={handleDelete}/>\n    </div>\n);\n}\n\n\nexport default Home;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,SAAS,QAAQ,OAAO;AACjC,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,KAAK,EAACC,QAAQ,CAAC,GAACR,QAAQ,CAAC,CAC5B;IAACS,KAAK,EAAC,gBAAgB;IAACC,IAAI,EAAC,gBAAgB;IAACC,MAAM,EAAC,OAAO;IAACC,EAAE,EAAC;EAAC,CAAC,EAClE;IAACH,KAAK,EAAC,eAAe;IAACC,IAAI,EAAC,gBAAgB;IAACC,MAAM,EAAC,OAAO;IAACC,EAAE,EAAC;EAAC,CAAC,EACjE;IAACH,KAAK,EAAC,kBAAkB;IAACC,IAAI,EAAC,gBAAgB;IAACC,MAAM,EAAC,OAAO;IAACC,EAAE,EAAC;EAAC,CAAC,CACvE,CAAC;EAEF,MAAM,CAACC,IAAI,EAACC,OAAO,CAAC,GAACd,QAAQ,CAAC,IAAI,CAAC;EAEnC,SAASe,YAAYA,CAACH,EAAE,EAAC;IACrB,MAAMI,QAAQ,GAACT,KAAK,CAACU,MAAM,CAACC,IAAI,IAAEA,IAAI,CAACN,EAAE,KAAGA,EAAE,CAAC;IAC/CJ,QAAQ,CAACQ,QAAQ,CAAC;EACtB;;EAGA;;EAEA;EACAf,SAAS,CAAC,MAAI;IACVkB,KAAK,CAAC,6BAA6B,CAAC,CACnCC,IAAI,CAACC,GAAG,IAAE;MACP,OAAOA,GAAG,CAACC,IAAI,CAAC,CAAC;IACrB,CAAC,CAAC,CACDF,IAAI,CAACG,IAAI,IAAE;MACRf,QAAQ,CAACe,IAAI,CAAC;IAClB,CACA,CAAC;EACL,CAAC,EAAC,EAAE,CAAC;;EAGL;;EAIA;EACA;EACA;EACA;EACA;;EAIA,oBACInB,OAAA;IAAKoB,SAAS,EAAC,MAAM;IAAAC,QAAA,eACjBrB,OAAA,CAACF,QAAQ;MAACK,KAAK,EAAEA,KAAM;MAACE,KAAK,EAAC,cAAc;MAACM,YAAY,EAAEA;IAAa;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzE,CAAC;AAEV,CAAC;AAAAvB,EAAA,CA/CKD,IAAI;AAAAyB,EAAA,GAAJzB,IAAI;AAkDV,eAAeA,IAAI;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}